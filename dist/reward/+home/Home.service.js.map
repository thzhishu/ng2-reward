{"version":3,"file":"Home.service.js","sourceRoot":"","sources":["../../../../../../src/reward/+home/Home.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,uBAAyB,eAAe,CAAC,CAAA;AACzC,uBAAqD,eAAe,CAAC,CAAA;AACrE,6BAA2B,iBAAiB,CAAC,CAAA;AAC7C,yBAAsB,oBAAoB,CAAC,CAAA;AAE3C;IACI,YAAmB,KAAY,EAAQ,aAAqB,EAAS,aAAsB,EAAS,SAAkB;QAAnG,UAAK,GAAL,KAAK,CAAO;QAAQ,kBAAa,GAAb,aAAa,CAAQ;QAAS,kBAAa,GAAb,aAAa,CAAS;QAAS,cAAS,GAAT,SAAS,CAAS;IACtH,CAAC;AACL,CAAC;AAHY,aAAK,QAGjB,CAAA;AAED,MAAM,WAAW,GAAI,gBAAO,GAAC,oBAAoB,CAAC;AAGlD;IAGI,YAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;IAE9B,CAAC;IAED,QAAQ;IAER,CAAC;IAED,GAAG;QACC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACrF,CAAC;IAED,GAAG,CAAC,OAAO;QACP,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACnC,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC;QAClE,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QACvD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACrG,CAAC;IAEO,WAAW,CAAC,KAAU;QAC1B,oEAAoE;QACpE,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,IAAI,cAAc,CAAC;QAC7C,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;QAChD,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;AACL,CAAC;AA7BD;IAAC,iBAAU,EAAE;;eAAA;AACA,mBAAW,cA4BvB,CAAA","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Http, Response,Headers, RequestOptions} from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport {baseUrl} from '../services/config';\n\nexport class RType {\n    constructor(public cRTId:number,public cRPRewardType: number, public cRTRewardName?: string, public cRTStatus?: number) {\n    }\n}\n\nconst HomeListUrl =  baseUrl+'/rewardManage/list';\n\n@Injectable()\nexport class HomeService {\n    typelist: RType[];\n\n    constructor(private http: Http) {\n\n    }\n\n    ngOnInit() {\n\n    }\n\n    get() {\n        return this.http.get(HomeListUrl).map(res => res.json()).catch(this.handleError);\n    }\n\n    add(program) {\n        let body = JSON.stringify(program);\n        let headers = new Headers({ 'Content-Type': 'application/json' });\n        let options = new RequestOptions({ headers: headers });\n        return this.http.post(HomeListUrl, body, options).map(res => res.json()).catch(this.handleError);\n    }\n\n    private handleError(error: any) {\n        // In a real world app, we might use a remote logging infrastructure\n        let errMsg = error.message || 'Server error';\n        console.error(errMsg); // log to console instead\n        return Observable.throw(errMsg);\n    }\n}\n"]}